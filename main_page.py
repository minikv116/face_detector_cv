import os
from pathlib import Path
import streamlit as st
import results_display
from video_handler import load_deepface_models # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π DeepFace


# ===================== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π DeepFace –∏ TensorFlow =====================
MODELS_DIR = Path('models')
os.environ['DEEPFACE_HOME'] = str(MODELS_DIR)

if not os.path.exists('./models'):
    os.makedirs('./models')
if not os.path.exists('./models/.deepface'):
    os.makedirs('./models/.deepface')
if not os.path.exists('./models/.deepface/weights'):
    os.makedirs('./models/.deepface/weights')  

import tensorflow as tf
os.environ['TF_GPU_ALLOCATOR'] = 'cuda_malloc_async'
gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
    try:
        for gpu in gpus:
            tf.config.experimental.set_memory_growth(gpu, True)
    except RuntimeError as ex:
        print(ex)


# ===================== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit =====================
st.set_page_config(
    layout='wide',
    page_title='–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–π, –ø–æ–ª–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞',
    page_icon='üìπ'
)
st.title("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–π, –ø–æ–ª–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞")

# ===================== –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π DeepFace =====================
with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π DeepFace..."):
    load_deepface_models()
st.success("–ú–æ–¥–µ–ª–∏ DeepFace —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# ===================== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ media =====================
# –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
MAIN_VIDEO_PATH = os.path.join("media", "result_video.mp4")
# –ü—É—Ç—å –∫ CSV —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∞–π–ª—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ media)
CSV_PATH = os.path.join("media", "video_results.csv")

# ===================== –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ =====================
video_width = 280
video_side = 100

if os.path.exists(MAIN_VIDEO_PATH):
    with open(MAIN_VIDEO_PATH, 'rb') as file:
        video_bytes = file.read()
    st.subheader("–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ")
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–ª–æ–Ω–æ–∫
    _, container, _ = st.columns([video_side, video_width, video_side])
    container.video(data=video_bytes)
else:
    st.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ media.")

# ===================== –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ =====================
st.header("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
# –§—É–Ω–∫—Ü–∏—è display_results –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä csv_path, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç—Ä–æ—è—Ç—Å—è –≥—Ä–∞—Ñ–∏–∫–∏
results_display.display_results(csv_path=CSV_PATH)
